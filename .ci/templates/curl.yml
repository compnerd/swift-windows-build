jobs:
  - job: ${{ parameters.host }}
    variables:
      install.directory: $(Build.StagingDirectory)/curl-${{ parameters.platform }}-${{ parameters.host }}/Library/libcurl-development
      zlib.directory: $(Pipeline.Workspace)/Library/zlib-1.2.11
    steps:
      - download: zlib
        artifact: zlib-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download zlib'
      - checkout: self
        displayName: 'checkout compnerd/swift-build'
      - checkout: curl/curl
        displayName: 'checkout curl/curl'

      - task: BatchScript@1
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: VsDevCmd.bat
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true

      - script: |
          echo ##vso[task.setvariable variable=CC]=cl
        condition: and( eq( variables['Agent.OS'], 'Windows_NT' ), eq( '${{ parameters.platform }}', 'windows' ) )
        displayName: CC
      - script: |
          echo ##vso[task.setvariable variable=CXX]=cl
        condition: and( eq( variables['Agent.OS'], 'Windows_NT' ), eq( '${{ parameters.platform }}', 'windows' ) )
        displayName: CXX

      - script: |
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
          sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
          sudo apt-get update
          sudo apt-get -y install cmake ninja-build
        condition: eq( variables['Agent.OS'], 'Linux' )
        displayName: Install Dependencies

      - task: CMake@1
        displayName: 'Configure curl'
        inputs:
          # NOTE(compnerd) workaround old cmake installation on hosted agents
          workingDirectory: $(Build.BinariesDirectory)/curl
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/curl
            -B $(Build.BinariesDirectory)/curl
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/curl.cmake
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_BUILD_TYPE=MinSizeRel
            -D CMAKE_INSTALL_PREFIX=$(install.directory)/usr
            -D ZLIB_ROOT=$(zlib.directory)/usr
            -D BUILD_SHARED_LIBS=NO
            -D BUILD_TESTING=NO

      - task: CMake@1
        displayName: Build CURL
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/curl

      - task: CMake@1
        displayName: Install CURL
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/curl --target install

      - publish: $(Build.StagingDirectory)/curl-${{ parameters.platform }}-${{ parameters.host }}
        artifact: curl-${{ parameters.platform }}-${{ parameters.host }}
