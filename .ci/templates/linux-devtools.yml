jobs:
  - job: ${{ parameters.host }}
    variables:
      sqlite.directory: $(Pipeline.Workspace)/sqlite/sqlite-${{ parameters.platform }}-${{ parameters.host }}/Library/sqlite-3.30.1

      toolchain.directory: $(Pipeline.Workspace)/toolchain-linux-x64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain

      sdk.directory: $(Pipeline.Workspace)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Developer/Platforms/${{ parameters.os }}.platform/Developer/SDKs/${{ parameters.os }}.sdk

      platform.directory: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform

      llbuild.version: development
      tsc.version: development
      IndexStoreDB.version: development
      SwiftPM.version: development
    steps:
      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Enable symbolic links, disable line ending conversion'
      - download: current
        artifact: toolchain-linux-x64
        displayName: 'download toolchain'
      - download: current
        artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download SDK'
      - download: sqlite
        artifact: sqlite-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download SQLite'
      - checkout: self
        displayName: 'checkout compnerd/swift-build'
      - checkout: apple/swift
        displayName: 'checkout apple/swift'
      - checkout: apple/swift-llbuild
        displayName: 'checkout apple/swift-llbuild'
        path: s/llbuild
      - checkout: apple/swift-tools-support-core
        displayName: 'checkout apple/swift-tools-support-core'
        path: s/tools-support-core
      - checkout: apple/swift-package-manager
        displayName: 'checkout apple/swift-package-manager'
        path: s/swiftpm
      - checkout: apple/indexstore-db
        displayName: 'checkout apple/indexstore-db'
      - script: |
          function ApplyPatches() {
            local repository=${1} ; shift
            for PR in "${@}" ; do
              git -C ${repository} fetch origin pull/${PR}/head
              git -C ${repository} cherry-pick FETCH_HEAD
            done
          }

          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          ApplyPatches llbuild ${LLBUILD_PR}
          ApplyPatches tools-support-core ${TSC_PR}
          ApplyPatches swiftpm ${SPM_PR}
          ApplyPatches indexstore-db ${INDEXSTOREDB_PR}
        displayName: 'Apply Patches'
      - script: |
          chmod +x $(toolchain.directory)/usr/bin/ar
          chmod +x $(toolchain.directory)/usr/bin/clang
          chmod +x $(toolchain.directory)/usr/bin/clang++
          chmod +x $(toolchain.directory)/usr/bin/ranlib
          chmod +x $(toolchain.directory)/usr/bin/swift-autolink-extract
          chmod +x $(toolchain.directory)/usr/bin/swiftc
          chmod +x $(toolchain.directory)/usr/bin/ld.lld
        condition: eq( variables['Agent.OS'], 'Linux' )
        displayName: 'Correct File Modes'

      - task: CMake@1
        displayName: Configure llbuild
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/llbuild
            -B $(Build.BinariesDirectory)/llbuild
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_C_COMPILER=$(toolchain.directory)/usr/bin/clang
            -D CMAKE_CXX_COMPILER=$(toolchain.directory)/usr/bin/clang++
            -D CMAKE_Swift_COMPILER=$(toolchain.directory)/usr/bin/swiftc
            -D CMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -use-ld=lld"
            -D CMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/SharedSupport/llbuild-$(llbuild.version)/usr
            -D LLBUILD_SUPPORT_BINDINGS=Swift
            -D SQLite3_LIBRARY=$(sqlite.directory)/usr/lib/libSQLite3.a
            -D SQLite3_INCLUDE_DIR=$(sqlite.directory)/usr/include

      - task: CMake@1
        displayName: Build llbuild
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/llbuild

      - task: CMake@1
        displayName: Install llbuild
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/llbuild --target install

      - task: CMake@1
        displayName: Configure tools-support-core
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/tools-support-core
            -B $(Build.BinariesDirectory)/tsc
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_C_COMPILER=$(toolchain.directory)/usr/bin/clang
            -D CMAKE_Swift_COMPILER=$(toolchain.directory)/usr/bin/swiftc
            -D CMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -use-ld=lld"
            -D CMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/Library/TSC-$(tsc.version)/usr
            -D BUILD_SHARED_LIBS=YES

      - task: CMake@1
        displayName: Build tools-support-core
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/tsc

      - task: CMake@1
        displayName: Install tools-support-core
        enabled: false
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/tsc --target install

      - task: CMake@1
        displayName: Configure swift-package-manager
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/swiftpm
            -B $(Build.BinariesDirectory)/spm
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/linux-${{ parameters.arch }}.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_C_COMPILER=$(toolchain.directory)/usr/bin/clang
            -D CMAKE_Swift_COMPILER=$(toolchain.directory)/usr/bin/swiftc
            -D CMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -use-ld=lld"
            -D CMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/SharedSupport/swiftpm-$(SwiftPM.version)/usr
            -D BUILD_SHARED_LIBS=YES
            -D TSC_DIR=$(Build.BinariesDirectory)/tsc/cmake/modules
            -D LLBuild_DIR=$(Build.BinariesDirectory)/llbuild/cmake/modules

      - task: CMake@1
        displayName: Build swift-package-manager
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/spm

      - task: CMake@1
        displayName: Install swift-package-manager
        enabled: false
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/spm --target install

      - task: CMake@1
        displayName: Configure IndexStoreDB
        inputs:
          cmakeArgs:
            -G Ninja
            -S $(Build.SourcesDirectory)/indexstore-db
            -B $(Build.BinariesDirectory)/indexstore-db
            -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}.cmake
            -D CMAKE_BUILD_TYPE=Release
            -D CMAKE_CXX_COMPILER=$(toolchain.directory)/usr/bin/clang++
            -D CMAKE_Swift_COMPILER=$(toolchain.directory)/usr/bin/swiftc
            -D CMAKE_Swift_FLAGS="-resource-dir $(sdk.directory)/usr/lib/swift -use-ld=lld"
            -D CMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/SharedSupport/IndexStoreDB-$(IndexStoreDB.version)/usr
            -D BUILD_SHARED_LIBS=YES
            -D CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES="$(sdk.directory)/usr/lib/swift;$(sdk.directory)/usr/lib/swift/Block"

      - task: CMake@1
        displayName: Build IndexStoreDB
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/indexstore-db

      - task: CMake@1
        displayName: Install IndexStoreDB
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)/indexstore-db --target install

      - publish: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}
        artifact: devtools-${{ parameters.platform }}-${{ parameters.host }}
